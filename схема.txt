TELEGRAM BOT С CSV ХРАНИЛИЩЕМ - СХЕМА РАБОТЫ
==================================================

┌─────────────────────────────────────────────────────────────────────────────────┐
│                           TELEGRAM API                                          │
│                                                                                 │
│  ┌─────────────┐    ┌─────────────┐    ┌─────────────┐                        │
│  │   User 1    │    │   User 2    │    │   User N    │                        │
│  │ (123456789) │    │ (987654321) │    │ (555666777) │                        │
│  └─────┬───────┘    └─────┬───────┘    └─────┬───────┘                        │
│        │                  │                  │                                │
│        │                  │                  │                                │
│        ▼                  ▼                  ▼                                │
│  ┌─────────────┐    ┌─────────────┐    ┌─────────────┐                        │
│  │  Message 1  │    │  Message 2  │    │  Message N  │                        │
│  │ (Text/Photo │    │ (Video/Doc  │    │ (Audio/Voice│                        │
│  │  /Video/etc)│    │  /Audio/etc)│    │  /etc)      │                        │
│  └─────────────┘    └─────────────┘    └─────────────┘                        │
└─────────────────────────────────────────────────────────────────────────────────┘
                                    │
                                    │ Webhook POST /webhook
                                    ▼
┌─────────────────────────────────────────────────────────────────────────────────┐
│                  NGINX (Reverse Proxy) — только для режима webhook            │
│                                                                                 │
│  ┌─────────────────────────────────────────────────────────────────────────┐   │
│  │                    HTTPS (SSL) → HTTP (Port 8000)                      │   │
│  │                                                                         │   │
│  │  ┌─────────────┐    ┌─────────────┐    ┌─────────────┐                │   │
│  │  │   cert.pem  │    │   key.pem   │    │   nginx.conf│                │   │
│  │  │ (SSL Cert)  │    │ (SSL Key)   │    │ (Config)    │                │   │
│  │  └─────────────┘    └─────────────┘    └─────────────┘                │   │
│  └─────────────────────────────────────────────────────────────────────────┘   │
└─────────────────────────────────────────────────────────────────────────────────┘
                                    │
                                    │ HTTP Request (webhook)
                                    ▼
┌─────────────────────────────────────────────────────────────────────────────────┐
│                           BOT SERVICE (Python)                                 │
│                                                                                 │
│  ┌─────────────────────────────────────────────────────────────────────────┐   │
│  │                        main.py (Entry Point)                           │   │
│  │                                                                         │   │
│  │  ┌─────────────────────────────────────────────────────────────────┐   │   │
│  │  │                    Инициализация                               │   │   │
│  │  │  • Загрузка .env переменных                                     │   │   │
│  │  │  • Создание Bot и Dispatcher                                    │   │   │
│  │  │  • Инициализация CSV хранилища                                  │   │   │
│  │  │  • Создание MessageHandler                                      │   │   │
│  │  │  • Установка webhook                                            │   │   │
│  │  └─────────────────────────────────────────────────────────────────┘   │   │
│  │                                                                         │   │
│  │  ┌─────────────────────────────────────────────────────────────────┐   │   │
│  │  │                    HTTP Server                                  │   │   │
│  │  │  • aiohttp web server на порту 8000                            │   │   │
│  │  │  • Webhook handler для /webhook                                │   │   │
│  │  │  • Startup/shutdown handlers                                   │   │   │
│  │  └─────────────────────────────────────────────────────────────────┘   │   │
│  └─────────────────────────────────────────────────────────────────────────┘   │
│                                    │                                           │
│                                    │ Message Processing                        │
│                                    ▼                                           │
│  ┌─────────────────────────────────────────────────────────────────────────┐   │
│  │                    message_handler.py                                   │   │
│  │                                                                         │   │
│  │  ┌─────────────────────────────────────────────────────────────────┐   │   │
│  │  │              handle_user_message()                               │   │   │
│  │  │  • Прием сообщения от пользователя                              │   │   │
│  │  │  • Пересылка в канал с пометкой                                  │   │   │
│  │  │  • Сохранение маппинга в CSV                                    │   │   │
│  │  │  • Отправка подтверждения пользователю                          │   │   │
│  │  └─────────────────────────────────────────────────────────────────┘   │   │
│  │                                    │                                     │   │
│  │                                    │ Channel Reply                       │   │
│  │                                    ▼                                     │   │
│  │  ┌─────────────────────────────────────────────────────────────────┐   │   │
│  │  │              handle_channel_reply()                             │   │   │
│  │  │  • Получение ответа в канале                                    │   │   │
│  │  │  • Поиск пользователя по CSV                                    │   │   │
│  │  │  • Пересылка ответа пользователю                                │   │   │
│  │  └─────────────────────────────────────────────────────────────────┘   │   │
│  └─────────────────────────────────────────────────────────────────────────┘   │
│                                    │                                           │
│                                    │ CSV Operations                           │
│                                    ▼                                           │
│  ┌─────────────────────────────────────────────────────────────────────────┐   │
│  │                    csv_storage.py                                       │   │
│  │                                                                         │   │
│  │  ┌─────────────────────────────────────────────────────────────────┐   │   │
│  │  │                    CSVMessageStore                               │   │   │
│  │  │                                                                 │   │   │
│  │  │  ┌─────────────────────────────────────────────────────────┐   │   │   │
│  │  │  │              Методы хранения                            │   │   │   │
│  │  │  │  • save_message_mapping()                              │   │   │   │
│  │  │  │  • get_user_by_channel_message()                       │   │   │   │
│  │  │  │  • get_user_message_id()                               │   │   │   │
│  │  │  │  • get_all_mappings()                                  │   │   │   │
│  │  │  └─────────────────────────────────────────────────────────┘   │   │   │
│  │  │                                                                 │   │   │
│  │  │  ┌─────────────────────────────────────────────────────────┐   │   │   │
│  │  │  │              Безопасность                              │   │   │   │
│  │  │  │  • asyncio.Lock для синхронизации                      │   │   │   │
│  │  │  │  • Асинхронные операции                                │   │   │   │
│  │  │  │  • Обработка ошибок                                    │   │   │   │
│  │  │  └─────────────────────────────────────────────────────────┘   │   │   │
│  │  └─────────────────────────────────────────────────────────────────┘   │   │
│  └─────────────────────────────────────────────────────────────────────────┘   │
└─────────────────────────────────────────────────────────────────────────────────┘
                                    │
                                    │ CSV File Operations
                                    ▼
┌─────────────────────────────────────────────────────────────────────────────────┐
│                           CSV ФАЙЛ (message_mapping.csv)                      │
│                                                                                 │
│  ┌─────────────────────────────────────────────────────────────────────────┐   │
│  │                    Структура CSV файла                                 │   │
│  │                                                                         │   │
│  │  user_id,user_message_id,channel_message_id,created_at,user_name      │   │
│  │  123456789,111,222,2024-01-01T12:00:00,John                          │   │
│  │  987654321,333,444,2024-01-01T12:01:00,Jane                          │   │
│  │  555666777,555,666,2024-01-01T12:02:00,Bob                           │   │
│  │  ...                                                                   │   │
│  └─────────────────────────────────────────────────────────────────────────┘   │
│                                                                                 │
│  ┌─────────────────────────────────────────────────────────────────────────┐   │
│  │                    Автоматическое создание                             │   │
│  │  • Файл создается при первом запуске                                   │   │
│  │  • Заголовки добавляются автоматически                                 │   │
│  │  • Новые записи добавляются в конец                                    │   │
│  └─────────────────────────────────────────────────────────────────────────┘   │
└─────────────────────────────────────────────────────────────────────────────────┘
                                    │
                                    │ Channel Operations
                                    ▼
┌─────────────────────────────────────────────────────────────────────────────────┐
│                              TELEGRAM КАНАЛ                                    │
│                                                                                 │
│  ┌─────────────────────────────────────────────────────────────────────────┐   │
│  │                    Входящие сообщения                                 │   │
│  │                                                                         │   │
│  │  👤 Сообщение от пользователя John:                                   │   │
│  │     Привет! Как дела?                                                  │   │
│  │                                                                         │   │
│  │  👤 Фото от пользователя Jane:                                         │   │
│  │     Красивый закат                                                     │   │
│  │                                                                         │   │
│  │  👤 Видео от пользователя Bob:                                         │   │
│  │     Мой новый проект                                                   │   │
│  └─────────────────────────────────────────────────────────────────────────┘   │
│                                    │                                           │
│                                    │ Ответы администратора                     │
│                                    ▼                                           │
│  ┌─────────────────────────────────────────────────────────────────────────┐   │
│  │                    Ответы в канале                                     │   │
│  │                                                                         │   │
│  │  📢 Ответ на сообщение John:                                           │   │
│  │     Привет! Все хорошо, спасибо!                                       │   │
│  │                                                                         │   │
│  │  📢 Ответ на фото Jane:                                                │   │
│  │     Очень красиво! Где это?                                            │   │
│  │                                                                         │   │
│  │  📢 Ответ на видео Bob:                                                │   │
│  │     Отличная работа!                                                   │   │
│  └─────────────────────────────────────────────────────────────────────────┘   │
└─────────────────────────────────────────────────────────────────────────────────┘

ПОТОК ДАННЫХ:
==============

1. ПОЛЬЗОВАТЕЛЬ → БОТ (webhook):
   ┌─────────────────────────────────────────────────────────────────────────┐
   │ 1. Пользователь отправляет сообщение боту                              │
   │ 2. Telegram API отправляет webhook на /webhook                         │
   │ 3. Nginx проксирует запрос на бота (порт 8000)                        │
   │ 4. main.py получает сообщение через Dispatcher                         │
   │ 5. message_handler.py обрабатывает сообщение                          │
   │ 6. Сообщение пересылается в канал с пометкой                          │
   │ 7. csv_storage.py сохраняет маппинг в CSV                             │
   │ 8. Пользователь получает подтверждение                                │
   └─────────────────────────────────────────────────────────────────────────┘

2. КАНАЛ → ПОЛЬЗОВАТЕЛЬ (webhook):
   ┌─────────────────────────────────────────────────────────────────────────┐
   │ 1. Администратор отвечает на сообщение в канале                       │
   │ 2. Telegram API отправляет webhook на /webhook                         │
   │ 3. Nginx проксирует запрос на бота                                     │
   │ 4. main.py получает сообщение через Dispatcher                         │
   │ 5. message_handler.py определяет тип чата (channel)                   │
   │ 6. handle_channel_reply() ищет пользователя в CSV                     │
   │ 7. csv_storage.py находит user_id по channel_message_id               │
   │ 8. _forward_reply_to_user() пересылает ответ пользователю             │
   └─────────────────────────────────────────────────────────────────────────┘

3. CSV ОПЕРАЦИИ:
Альтернатива (long polling):
============================
1. Бот устанавливает long polling соединение с Telegram API
2. Nginx и SSL не используются
3. Обработка сообщений аналогична webhook-потоку
   ┌─────────────────────────────────────────────────────────────────────────┐
   │ 1. Инициализация: создание файла с заголовками                        │
   │ 2. Сохранение: добавление новой строки с маппингом                    │
   │ 3. Поиск: чтение файла и поиск по channel_message_id                  │
   │ 4. Безопасность: использование asyncio.Lock                           │
   │ 5. Обработка ошибок: логирование и graceful fallback                  │
   └─────────────────────────────────────────────────────────────────────────┘

ТЕСТИРОВАНИЕ:
==============

scripts/test-bot.py:
┌─────────────────────────────────────────────────────────────────────────┐
│ 1. test_environment() - проверка .env переменных                        │
│ 2. test_bot_token() - валидация токена через getMe                     │
│ 3. test_csv_storage() - тестирование CSV функциональности              │
│    • Создание временного файла                                         │
│    • Сохранение тестового маппинга                                     │
│    • Поиск пользователя                                                │
│    • Подсчет записей                                                   │
│    • Очистка временных файлов                                          │
└─────────────────────────────────────────────────────────────────────────┘

ПРЕИМУЩЕСТВА АРХИТЕКТУРЫ:
==========================

✅ Простота: CSV файл легко просматривать и анализировать
✅ Надежность: асинхронные операции с блокировками
✅ Производительность: быстрый доступ к данным
✅ Переносимость: можно открыть в Excel, Google Sheets
✅ Масштабируемость: легко мигрировать на PostgreSQL
✅ Безопасность: только ID сообщений, без личной информации
✅ Мониторинг: логирование всех операций
✅ Тестирование: полное покрытие функциональности

ОГРАНИЧЕНИЯ:
=============

⚠️  Размер файла: при большом количестве сообщений файл может стать большим
⚠️  Производительность: линейный поиск по CSV (O(n))
⚠️  Одновременный доступ: только один процесс может писать в файл
⚠️  Резервное копирование: нужно вручную создавать бэкапы

РЕШЕНИЯ ДЛЯ МАСШТАБИРОВАНИЯ:
==============================

1. Периодическая архивация старых записей
2. Индексирование по user_id и channel_message_id
3. Разделение на несколько CSV файлов по датам
4. Миграция на PostgreSQL при необходимости
5. Кэширование часто используемых маппингов